# This workflow will install Python dependencies,
# run tests and lint with a single version of Python and
# then deploy it to AWS Elastic Beanstalk
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# reference:
# https://github.com/adv-it/github-actions-part2-cicd-to-aws/blob/master/.github/workflows/main.yml
# https://github.com/marketplace/actions/beanstalk-deploy

name: Python application

env:
  EB_PACKAGE_S3_BUCKET_NAME : "msds498-captsone-s3"
  EB_APPLICATION_NAME       : "msds498capstoneflask"
  EB_ENVIRONMENT_NAME       : "Msds498capstoneflask-env"
  DEPLOY_PACKAGE_NAME       : "flask-app-${{ github.sha }}.zip"
  AWS_REGION_NAME           : "us-east-1"
  RDS_HOSTNAME: ${{ secrets.RDS_HOSTNAME }}
  RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
  RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
  RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
  RDS_PORT: ${{ secrets.RDS_PORT }}
  RDS_TB_NAME: ${{ secrets.RDS_TB_NAME }}

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9]
        poetry-version: [1.1.6]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Run image
      uses: abatilo/actions-poetry@v2.0.0
      with:
        poetry-version: ${{ matrix.poetry-version }}
    - name: Cache Poetry virtualenv
      uses: actions/cache@v1
      id: cache
      with:
        path: ~/.virtualenvs
        key: poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-${{ hashFiles('**/poetry.lock') }}
    - name: Install Dependencies
      run: poetry install
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Run pylint
      run: poetry run pylint --load-plugins pylint_flask --disable=R,C flask_app/*.py

    - name: Run pytest
      run: PYTHONPATH=".." poetry run pytest -vv --cov-report term-missing --cov=flask_app.web tests/test_*.py

    - name: Print nice message on completion of CI Pipeline
      run : echo "CI Pipeline part finished successfully"

  cd:
    runs-on: ubuntu-latest
    needs: [ci]

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Create ZIP deployment package
      run : zip -r ${{ env.DEPLOY_PACKAGE_NAME }} ./  -x  *.git*

    - name: Configure my AWS Credentils
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id    : ${{ secrets.MY_AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_KEY }}
        aws-region           : ${{ env.AWS_REGION_NAME }}

    - name: Copy our Deployment package to S3 bucket
      run : aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.EB_PACKAGE_S3_BUCKET_NAME}}/

    - name: Create new ElasticBeanstalk Applicaiton Version
      run : |
        aws elasticbeanstalk create-application-version \
        --application-name ${{ env.EB_APPLICATION_NAME }} \
        --source-bundle S3Bucket="${{ env.EB_PACKAGE_S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
        --version-label "Ver-${{ github.sha }}" \
        --description "CommitSHA-${{ github.sha }}"

    - name: Deploy our new Application Version
      run : aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "Ver-${{ github.sha }}"

    - name: Print nice message on completion of CD Pipeline
      run : echo "CD Pipeline part finished successfully"